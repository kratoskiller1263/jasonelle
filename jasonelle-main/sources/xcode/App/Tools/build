#!/bin/sh
#//  Created by clsource on 13-04-22
#//
#//  Copyright (c) 2022 Jasonelle.com
#//
#//  This file is part of Jasonelle Project <https://jasonelle.com>.
#//  Jasonelle Project is dual licensed. You can choose between AGPLv3 or MPLv2.
#//  MPLv2 is only valid if the software has a unique Jasonelle Key which was purchased in official channels.
#//
#//  == AGPLv3
#//  Jasonelle is free software: you can redistribute it and/or modify it under the terms of the Affero GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
#//  Jasonelle is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the Affero GNU General Public License for more details.
#//  You should have received a copy of the Affero GNU General Public License along with Jasonelle. If not, see <https://www.gnu.org/licenses/>.
#//
#//  == MPLv2 (Only valid if purchased a Jasonelle Key)
#//  This Source Code Form is subject to the terms
#//  of the Mozilla Public License, v. 2.0.
#//  If a copy of the MPL was not distributed
#//  with this file, You can obtain one at
#//
#//  <https://mozilla.org/MPL/2.0/>.
#//
#//
#// This script is executed on the Build Phases
#// It will format the JS files using dprint https://dprint.dev/config/ and then
#// It will call esbuild command to bundle all javascript files
#// see: https://esbuild.github.io/getting-started/

# app.js normally stores the main logic for the app
INPUT_APP=${SRCROOT}/JS/app.js

# webview.js stores injected javascript to every webview instance
INPUT_WEBVIEW=${SRCROOT}/JS/webview.js

OUTPUT=${SRCROOT}/App/_build
CONFIG_ESBUILD=${SRCROOT}/Tools/bundler.json

# Specify if should format on build
# 1 = format, 0 = none
FORMAT=1
CONFIG_DPRINT=${SRCROOT}/Tools/formatter.json

# If you want to obfuscate the JS, enable this option
MINIFY=""
#MINIFY=--minify

# BUILD TOOLS
# Begin esbuild execution
# Ensure that these binaries have execution rights!

# Intel Processors (i386)
ESBUILD=${SRCROOT}/../Tools/esbuild/esbuild
DPRINT=${SRCROOT}/../Tools/dprint/dprint

# ARM Processors (M1, M2 ...)
# Append -arm to the binaries's name
if [[ $(uname -p) == 'arm' ]]; then
    ESBUILD=${SRCROOT}/../Tools/esbuild/esbuild-arm
    DPRINT=${SRCROOT}/../Tools/dprint/dprint-arm
fi

echo "note: Detected Architecture: $(uname -p)"
echo "note: Using: $("${DPRINT}" --version)"
echo "note: Using: esbuild $("${ESBUILD}" --version)"

if [ ${FORMAT} -eq 1 ]; then
  echo "----------------"
  echo "Begin Formatting"
  # Format files only inside the App directory
  "${DPRINT}" fmt --config ${CONFIG_DPRINT}
  "${DPRINT}" output-format-times --config ${CONFIG_DPRINT}
fi

echo "----------------"
echo "Begin Bundling"
BANNER_JS=/*--automatically-generated-by-esbuild--*/

"${ESBUILD}" "${INPUT_APP}" --outdir="${OUTPUT}" --bundle ${MINIFY}  --target=safari11 --analyze --tsconfig="${CONFIG_ESBUILD}" --banner:js=${BANNER_JS}

# Stores the exit code from the previous command
BUILD1=$?

"${ESBUILD}" "${INPUT_WEBVIEW}" --outdir="${OUTPUT}" --bundle ${MINIFY}  --target=safari11 --analyze --tsconfig="${CONFIG_ESBUILD}" --banner:js=${BANNER_JS}

BUILD2=$?

#// Must always be zero
EXIT=$(expr $BUILD1 + $BUILD2)

#// Pass the exit code to the main script runner in Xcode build phases
exit $EXIT
